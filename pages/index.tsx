import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import React from 'react';
import Modal from 'react-modal';
import axios from 'axios';
import { useWindowSize } from '../components/UseWindowSize';

export default function Home() {

  const [modalIsOpen, setIsOpen] = React.useState(false);
  const [errorMessage, setErrorMessage] = React.useState('')
  const [fullName, setfullName] = React.useState('');
  const [email, setEmail] = React.useState('');
  const [confirmEmail, setConfirmEmail] = React.useState('');
  const [loading, setLoading] = React.useState(false)
  const [success, setIsSuccess] = React.useState(false)

// simple custom style to identify modal responsiveness

let [winWidth] = useWindowSize();

  const customStyles = {
    content: {
      width: winWidth < 600 ? '80%' : '50%',
      top: '50%',
      left: '50%',
      right: 'auto',
      bottom: 'auto',
      marginRight: '-50%',
      transform: 'translate(-50%, -50%)',
    },
  };

  const validate = (email: string) => {
    const expression = /(?!.*\.{2})^([a-z\d!#$%&'*+\-\/=?^_`{|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+(\.[a-z\d!#$%&'*+\-\/=?^_`{|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+)*|"((([\t]*\r\n)?[\t]+)?([\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*(([\t]*\r\n)?[\t]+)?")@(([a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|[a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF][a-z\d\-._~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]*[a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])\.)+([a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|[a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF][a-z\d\-._~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]*[a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])\.?$/i;

    return expression.test(String(email).toLowerCase())
}

  const openModal = () => {
    setIsOpen(true);
  }

  const closeModal = () => {
    setIsOpen(false);
  }

  const registerEmail = (event: { preventDefault: () => void }) => {
    event.preventDefault() 
    openModal()
  }

  const requestInvitation = (event: { preventDefault: () => void }) => {
    event.preventDefault() 
    onSubmit()
  }

  const finishRegister = (event: { preventDefault: () => void }) => {
    event.preventDefault() 
    closeModal()
    setIsSuccess(false)
  }

  const onSubmit = () => {
    if (fullName && email && confirmEmail) {
      if (email === confirmEmail) {
        setErrorMessage('')
        setLoading(true)
        setTimeout(
          () => {
            checkSampleData(fullName, confirmEmail)
            setLoading(false)
            setIsSuccess(true)
          }, 3000)
      } else {
        setErrorMessage('Email is not the same as Confirm email')
      }
    } else {
      setErrorMessage('All fields cannot be empty')
    }
  }

  const checkSampleData = async (name: string, email: string) => {
      const req = await axios
        .post(`https://us-central1-blinkapp-684c1.cloudfunctions.net/fakeAuth`, {name, email})
        .then(response => { 
          console.log('success', response)
          setErrorMessage('')
        })
        .catch(error => {
            console.log('errorMessage', error.response.data.errorMessage)
            setErrorMessage(error.response.data.errorMessage)
        });
  }

  return (
    <React.Fragment>
    <div className={styles.container}>
      <Head>
        <title>Blinq Task</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header className={styles.header}>
        <h1>
          BROCCOLI & CO
        </h1>
      </header>
      <form onSubmit={registerEmail}>
      <main className={styles.main}>
        <div className={styles.grid}>
        <h1 className={styles.title}>
          A better way to enjoy everyday
        </h1>

        <p className={styles.description}>
          Be the first to know when we launch.
        </p>
        </div>
        <button className={styles.button} type="submit">Request an Invite</button>
      </main>
      </form>

      <footer className={styles.footer}>
        <div>
          <p>Made with ❤ in Melbourne. <br />
          © 2016 BROCCOLI & CO. All Rights Reserved.</p>
          </div>
      </footer>
    </div>
    <div>
      <Modal
        isOpen={modalIsOpen}
        onRequestClose={closeModal}
        style={customStyles}
        contentLabel="Example Modal"
      >
        <div className={styles.modalClose}>
        <button onClick={closeModal}>close</button>
        </div>
        {success ? 
        <form onSubmit={finishRegister}>
          <div className={styles.modal}>
          <div className={styles.modalHeader}>
          <h2>All Done!</h2>
          <hr className={styles.line} />
          </div>
          <div className={styles.inputContent}>
          <p className={styles.description}>
          You will be the first to experience Broccoli & Co when launch!
          </p>
          </div>
          <button className={styles.button} type="submit">OK</button>
          </div>
        </form>
        : 
        <form onSubmit={requestInvitation}>
        <div className={styles.modal}>
          <div className={styles.modalHeader}>
          <h2>Request an Invite</h2>
          <hr className={styles.line} />
          </div>
          <div className={styles.inputContent}>
          <input className={styles.input} value={fullName} onChange={(e) => setfullName(e.target.value)} type='text' placeholder={'Full Name'} />
          </div>
          <div className={styles.inputContent}>
          <input className={styles.input} type='text' value={email} onChange={(e) => setEmail(e.target.value)} placeholder={'Email'} />
          </div>
          <div className={styles.inputContent}>
          <input className={styles.input} type='text' value={confirmEmail} onChange={(e) => setConfirmEmail(e.target.value)} placeholder={'Confirm Email'} />
          </div>
          {loading ? 
          <button disabled={true} className={styles.button} type="submit">Loading, Please Wait...</button> 
          : 
          <button className={styles.button} type="submit">Send</button>
          }
          <div>
            <p>{errorMessage}</p>
          </div>
        </div>
        </form>
        }
      </Modal>
    </div>
    </React.Fragment>
  )
}
